
my_ext_ctrl_modul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  000003a8  0000043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080009a  0080009a  00000476  2**0
                  ALLOC
  3 .stab         00001c80  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001087  00000000  00000000  000020f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e9       	ldi	r26, 0x9A	; 154
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 39       	cpi	r26, 0x9C	; 156
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	1c d0       	rcall	.+56     	; 0xc0 <main>
  88:	8d c1       	rjmp	.+794    	; 0x3a4 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <init_template>:
 */
void 
__attribute__((noinline)) init_template(void) 
{
	// set ddr for led pin
	SET_BIT(LED_DDR, LED_PIN);            
  8c:	b8 9a       	sbi	0x17, 0	; 23
}
  8e:	08 95       	ret

00000090 <error_indication>:
{
#if COMMUNICATION_PATH == __SERIAL__
	if (state_of_template & STATE_SERIAL_INIT_DONE) {
		serial_send_string(error_string); 	
#elif COMMUNICATION_PATH == __LCD__
			if (state_of_template & STATE_LCD_INIT_DONE) {
  90:	80 91 9a 00 	lds	r24, 0x009A
  94:	83 fd       	sbrc	r24, 3
  96:	13 c0       	rjmp	.+38     	; 0xbe <error_indication+0x2e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  98:	20 e9       	ldi	r18, 0x90	; 144
  9a:	31 e0       	ldi	r19, 0x01	; 1
			//lcd_set_string(error_string, size); 
#endif
	} else {
		while (1) {
			SET_BIT(LED_PORT, LED_PIN);
  9c:	c0 9a       	sbi	0x18, 0	; 24
  9e:	88 ee       	ldi	r24, 0xE8	; 232
  a0:	93 e0       	ldi	r25, 0x03	; 3
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <error_indication+0x14>
  a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  aa:	d9 f7       	brne	.-10     	; 0xa2 <error_indication+0x12>
			_delay_ms(DELAYTIME_ON_ERROR);
			
			CLEAR_BIT(LED_PORT, LED_PIN);
  ac:	c0 98       	cbi	0x18, 0	; 24
  ae:	88 ee       	ldi	r24, 0xE8	; 232
  b0:	93 e0       	ldi	r25, 0x03	; 3
  b2:	f9 01       	movw	r30, r18
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <error_indication+0x24>
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	d9 f7       	brne	.-10     	; 0xb2 <error_indication+0x22>
  bc:	ef cf       	rjmp	.-34     	; 0x9c <error_indication+0xc>
  be:	08 95       	ret

000000c0 <main>:
/*
 * set LED on PB0 and clears it after DELAYTIME
 */
int 
__attribute__((OS_main)) main(void) 
{
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	ee 97       	sbiw	r28, 0x3e	; 62
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	cd bf       	out	0x3d, r28	; 61
#if COMMUNICATION_PATH == __SERIAL__
	const unsigned char greeting_string[] = "hello ... i'm an atmega168(pa)\n\r";
	const unsigned char error_string[] = "an error occured ... pls check\n\r";
	unsigned char byte = 0x31;
#elif COMMUNICATION_PATH == __LCD__
	const unsigned char greeting_string[] = "hello ... i'm an atmega32";
  ca:	de 01       	movw	r26, r28
  cc:	16 96       	adiw	r26, 0x06	; 6
  ce:	e0 e6       	ldi	r30, 0x60	; 96
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	8a e1       	ldi	r24, 0x1A	; 26
  d4:	01 90       	ld	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	81 50       	subi	r24, 0x01	; 1
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x14>
	const unsigned char error_string[] = "an error occured ... pls check";
  dc:	de 01       	movw	r26, r28
  de:	90 96       	adiw	r26, 0x20	; 32
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	8f e1       	ldi	r24, 0x1F	; 31
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	81 50       	subi	r24, 0x01	; 1
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x26>
	unsigned char data_string[5];

	memset(data_string, 0, sizeof(data_string));
  ee:	fe 01       	movw	r30, r28
  f0:	31 96       	adiw	r30, 0x01	; 1
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	df 01       	movw	r26, r30
  f6:	1d 92       	st	X+, r1
  f8:	8a 95       	dec	r24
  fa:	e9 f7       	brne	.-6      	; 0xf6 <main+0x36>
	 * Note: dont use serial & lcd -> PIN conflict 
	 */
#if USE_LCD == __YES__

#if COMMUNICATION_PATH == __LCD__
	lcd_setup_display();
  fc:	89 d0       	rcall	.+274    	; 0x210 <lcd_setup_display>
  fe:	80 91 9b 00 	lds	r24, 0x009B
	if (lcd_errno != MY_OK)
 102:	88 23       	and	r24, r24
 104:	19 f0       	breq	.+6      	; 0x10c <main+0x4c>
 106:	ce 01       	movw	r24, r28
		error_indication(error_string);
 108:	80 96       	adiw	r24, 0x20	; 32
 10a:	c2 df       	rcall	.-124    	; 0x90 <error_indication>
 10c:	80 91 9a 00 	lds	r24, 0x009A

	// init lcd done ... send greetings to peer
	state_of_template |= STATE_LCD_INIT_DONE;
 110:	88 60       	ori	r24, 0x08	; 8
 112:	80 93 9a 00 	sts	0x009A, r24
 116:	ce 01       	movw	r24, r28
 118:	06 96       	adiw	r24, 0x06	; 6
	lcd_send_string(greeting_string);
 11a:	28 d1       	rcall	.+592    	; 0x36c <lcd_send_string>
 11c:	b7 df       	rcall	.-146    	; 0x8c <init_template>
 11e:	80 e5       	ldi	r24, 0x50	; 80
 120:	93 ec       	ldi	r25, 0xC3	; 195
 122:	20 e9       	ldi	r18, 0x90	; 144
 124:	31 e0       	ldi	r19, 0x01	; 1
 126:	f9 01       	movw	r30, r18
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x68>
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	d9 f7       	brne	.-10     	; 0x126 <main+0x66>
 130:	d0 d0       	rcall	.+416    	; 0x2d2 <lcd_set_cursor_to_home_pos>
 132:	80 e5       	ldi	r24, 0x50	; 80
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 134:	93 ec       	ldi	r25, 0xC3	; 195
 136:	20 e9       	ldi	r18, 0x90	; 144
 138:	31 e0       	ldi	r19, 0x01	; 1
 13a:	f9 01       	movw	r30, r18
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x7c>
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	d9 f7       	brne	.-10     	; 0x13a <main+0x7a>
 144:	d3 d0       	rcall	.+422    	; 0x2ec <lcd_set_display_off>
 146:	80 e5       	ldi	r24, 0x50	; 80
 148:	93 ec       	ldi	r25, 0xC3	; 195
 14a:	20 e9       	ldi	r18, 0x90	; 144
 14c:	31 e0       	ldi	r19, 0x01	; 1
 14e:	f9 01       	movw	r30, r18
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0x90>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	d9 f7       	brne	.-10     	; 0x14e <main+0x8e>
 158:	d6 d0       	rcall	.+428    	; 0x306 <lcd_set_display_on>
 15a:	80 e5       	ldi	r24, 0x50	; 80
 15c:	93 ec       	ldi	r25, 0xC3	; 195
 15e:	20 e9       	ldi	r18, 0x90	; 144
 160:	31 e0       	ldi	r19, 0x01	; 1
 162:	f9 01       	movw	r30, r18
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0xa4>
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	d9 f7       	brne	.-10     	; 0x162 <main+0xa2>
 16c:	d9 d0       	rcall	.+434    	; 0x320 <lcd_set_cursor_off>
 16e:	80 e5       	ldi	r24, 0x50	; 80
 170:	93 ec       	ldi	r25, 0xC3	; 195
 172:	20 e9       	ldi	r18, 0x90	; 144
 174:	31 e0       	ldi	r19, 0x01	; 1
 176:	f9 01       	movw	r30, r18
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xb8>
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	d9 f7       	brne	.-10     	; 0x176 <main+0xb6>
 180:	9b d0       	rcall	.+310    	; 0x2b8 <lcd_clear_display>
 182:	80 e5       	ldi	r24, 0x50	; 80
 184:	93 ec       	ldi	r25, 0xC3	; 195
 186:	20 e9       	ldi	r18, 0x90	; 144
 188:	31 e0       	ldi	r19, 0x01	; 1
 18a:	f9 01       	movw	r30, r18
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0xcc>
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	d9 f7       	brne	.-10     	; 0x18a <main+0xca>
 194:	d2 d0       	rcall	.+420    	; 0x33a <lcd_set_cursor_on>
 196:	20 e9       	ldi	r18, 0x90	; 144
 198:	31 e0       	ldi	r19, 0x01	; 1
 19a:	c0 9a       	sbi	0x18, 0	; 24
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	97 e2       	ldi	r25, 0x27	; 39
 1a0:	f9 01       	movw	r30, r18
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0xe2>
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	d9 f7       	brne	.-10     	; 0x1a0 <main+0xe0>
 1aa:	c0 98       	cbi	0x18, 0	; 24
 1ac:	80 e1       	ldi	r24, 0x10	; 16
 1ae:	97 e2       	ldi	r25, 0x27	; 39
 1b0:	f9 01       	movw	r30, r18
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0xf2>
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	d9 f7       	brne	.-10     	; 0x1b0 <main+0xf0>
 1ba:	ef cf       	rjmp	.-34     	; 0x19a <main+0xda>

000001bc <lcd_reset_lcd>:

	/*
	 * reset the lcd with special case ot the function set
	 */

	LCD_PORT = 0x30;
 1bc:	40 e3       	ldi	r20, 0x30	; 48
 1be:	42 bb       	out	0x12, r20	; 18
	LCD_PUSH_EN_BUTTON();
 1c0:	ab 9a       	sbi	0x15, 3	; 21
 1c2:	80 e9       	ldi	r24, 0x90	; 144
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	fc 01       	movw	r30, r24
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_reset_lcd+0xc>
 1cc:	ab 98       	cbi	0x15, 3	; 21
 1ce:	fc 01       	movw	r30, r24
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_reset_lcd+0x14>
 1d4:	e0 e2       	ldi	r30, 0x20	; 32
 1d6:	fe e4       	ldi	r31, 0x4E	; 78
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_reset_lcd+0x1c>
	_delay_ms(LCD_INIT_LONG);  // the first takes quite long -> around 4 ms

	LCD_PORT = 0x30;
 1dc:	42 bb       	out	0x12, r20	; 18
	LCD_PUSH_EN_BUTTON();
 1de:	ab 9a       	sbi	0x15, 3	; 21
 1e0:	fc 01       	movw	r30, r24
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_reset_lcd+0x26>
 1e6:	ab 98       	cbi	0x15, 3	; 21
 1e8:	fc 01       	movw	r30, r24
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_reset_lcd+0x2e>
 1ee:	20 e2       	ldi	r18, 0x20	; 32
 1f0:	33 e0       	ldi	r19, 0x03	; 3
 1f2:	f9 01       	movw	r30, r18
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <lcd_reset_lcd+0x38>
	_delay_us(LCD_ENABLE_PAUSE_DOUBLE); // +200us

	LCD_PORT = 0x30;
 1f8:	42 bb       	out	0x12, r20	; 18
	LCD_PUSH_EN_BUTTON();
 1fa:	ab 9a       	sbi	0x15, 3	; 21
 1fc:	fc 01       	movw	r30, r24
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_reset_lcd+0x42>
 202:	ab 98       	cbi	0x15, 3	; 21
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <lcd_reset_lcd+0x48>
 208:	c9 01       	movw	r24, r18
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_reset_lcd+0x4e>
 */
#if CONTROLLER_FAMILY == __ARM__
	// fill me
#endif  // ARM

}
 20e:	08 95       	ret

00000210 <lcd_setup_display>:
/*
 * -> setup lcd (HD44780 or compatible)
 */
void 
lcd_setup_display(void) 
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
	 * -> RS low (commands)
	 * -> RW low (write)
	 */

	// setup db port
	LCD_DDR = 0xFF;	
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	81 bb       	out	0x11, r24	; 17
	LCD_PORT &= ~0xFF;
 218:	82 b3       	in	r24, 0x12	; 18
 21a:	12 ba       	out	0x12, r1	; 18
	 *        4. set DB
	 *        5. EN 1->0
	 *        6. clear/set RW
	 *        7. clear/set RS
	 */
	LCD_CTRL_DDR |= (1 << LCD_RS_PIN) | (1 << LCD_EN_PIN);
 21c:	84 b3       	in	r24, 0x14	; 20
 21e:	8c 60       	ori	r24, 0x0C	; 12
 220:	84 bb       	out	0x14, r24	; 20
	LCD_CTRL_PORT &= ~( (1 << LCD_RS_PIN) | (1 << LCD_EN_PIN) );
 222:	85 b3       	in	r24, 0x15	; 21
 224:	83 7f       	andi	r24, 0xF3	; 243
 226:	85 bb       	out	0x15, r24	; 21
 228:	88 ee       	ldi	r24, 0xE8	; 232
 22a:	93 e0       	ldi	r25, 0x03	; 3
 22c:	20 e9       	ldi	r18, 0x90	; 144
 22e:	31 e0       	ldi	r19, 0x01	; 1
 230:	c0 e9       	ldi	r28, 0x90	; 144
 232:	d1 e0       	ldi	r29, 0x01	; 1
 234:	f9 01       	movw	r30, r18
 236:	31 97       	sbiw	r30, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <lcd_setup_display+0x26>
 23a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 23c:	c9 f7       	brne	.-14     	; 0x230 <lcd_setup_display+0x20>
	 *       - also the lcd must get an reset if the controller get an reset
	 *       =====
	 *       - the order of the function sets is a must
	 *       - the same for most the values (only change 0x38 if needed) 
	 */
	lcd_reset_lcd();
 23e:	be df       	rcall	.-132    	; 0x1bc <lcd_reset_lcd>
 240:	88 e3       	ldi	r24, 0x38	; 56
	/*
	 * - 8 bit mode
	 * - 2 logical lines 
	 * - 5x7 fonts
	 */
	LCD_PORT = 0x38;
 242:	82 bb       	out	0x12, r24	; 18
 244:	ab 9a       	sbi	0x15, 3	; 21
 246:	ce 01       	movw	r24, r28
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_setup_display+0x38>
 24c:	ab 98       	cbi	0x15, 3	; 21
 24e:	ce 01       	movw	r24, r28
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <lcd_setup_display+0x40>
 254:	88 e0       	ldi	r24, 0x08	; 8
	LCD_PUSH_EN_BUTTON();

	/*
	 * - display on/off control instruction 
	 */
	LCD_PORT = LCD_CMD_DISPLAY_OFF;
 256:	82 bb       	out	0x12, r24	; 18
 258:	ab 9a       	sbi	0x15, 3	; 21
 25a:	ce 01       	movw	r24, r28
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_setup_display+0x4c>
 260:	ab 98       	cbi	0x15, 3	; 21
 262:	ce 01       	movw	r24, r28
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_setup_display+0x54>
 268:	81 e0       	ldi	r24, 0x01	; 1
	LCD_PUSH_EN_BUTTON();
	
	/*
	 * - clear display
	 */
	LCD_PORT = LCD_CMD_CLEAR_LCD;
 26a:	82 bb       	out	0x12, r24	; 18
 26c:	ab 9a       	sbi	0x15, 3	; 21
 26e:	ce 01       	movw	r24, r28
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <lcd_setup_display+0x60>
 274:	ab 98       	cbi	0x15, 3	; 21
 276:	ce 01       	movw	r24, r28
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <lcd_setup_display+0x68>
 27c:	80 e2       	ldi	r24, 0x20	; 32
 27e:	9e e4       	ldi	r25, 0x4E	; 78
 280:	fc 01       	movw	r30, r24
 282:	31 97       	sbiw	r30, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <lcd_setup_display+0x72>
 286:	26 e0       	ldi	r18, 0x06	; 6
	_delay_ms(LCD_INIT_LONG);

	/*
	 * - cursor auto increment
	 */
	LCD_PORT = 0x06;
 288:	22 bb       	out	0x12, r18	; 18
 28a:	ab 9a       	sbi	0x15, 3	; 21
 28c:	fe 01       	movw	r30, r28
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <lcd_setup_display+0x7e>
 292:	ab 98       	cbi	0x15, 3	; 21
 294:	fe 01       	movw	r30, r28
 296:	31 97       	sbiw	r30, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <lcd_setup_display+0x86>
 29a:	2f e0       	ldi	r18, 0x0F	; 15
	 *
	 * - display on
	 * - blinking cursor with
	 * - underline
	 */
	LCD_PORT = 0x0F;
 29c:	22 bb       	out	0x12, r18	; 18
 29e:	ab 9a       	sbi	0x15, 3	; 21
 2a0:	fe 01       	movw	r30, r28
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <lcd_setup_display+0x92>
 2a6:	ab 98       	cbi	0x15, 3	; 21
 2a8:	21 97       	sbiw	r28, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcd_setup_display+0x98>
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <lcd_setup_display+0x9c>
 2b0:	aa 9a       	sbi	0x15, 2	; 21
	LCD_PUSH_EN_BUTTON();
	_delay_ms(LCD_INIT_LONG);

	// enable character mode -> default 
	LCD_CTRL_PORT |= (1 << LCD_RS_PIN);
 2b2:	df 91       	pop	r29
 */
#if CONTROLLER_FAMILY == __ARM__
	// fill me
#endif  // ARM

}
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <lcd_clear_display>:
/*
 *  -> clear display
 */
void lcd_clear_display()
{  
    LCD_SET_RS_TO_COMMAND();
 2b8:	aa 98       	cbi	0x15, 2	; 21
    LCD_PORT = LCD_CMD_CLEAR_LCD;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	82 bb       	out	0x12, r24	; 18
    LCD_PUSH_EN_BUTTON();
 2be:	ab 9a       	sbi	0x15, 3	; 21
 2c0:	80 e9       	ldi	r24, 0x90	; 144
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	fc 01       	movw	r30, r24
 2c6:	31 97       	sbiw	r30, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_clear_display+0xe>
 2ca:	ab 98       	cbi	0x15, 3	; 21
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <lcd_clear_display+0x14>
}
 2d0:	08 95       	ret

000002d2 <lcd_set_cursor_to_home_pos>:
/*
 *  -> set cursor to home position
 */
void lcd_set_cursor_to_home_pos()
{  
    LCD_SET_RS_TO_COMMAND();
 2d2:	aa 98       	cbi	0x15, 2	; 21
    LCD_PORT = LCD_CMD_CURSOR_HOME;
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	82 bb       	out	0x12, r24	; 18
    LCD_PUSH_EN_BUTTON();
 2d8:	ab 9a       	sbi	0x15, 3	; 21
 2da:	80 e9       	ldi	r24, 0x90	; 144
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	fc 01       	movw	r30, r24
 2e0:	31 97       	sbiw	r30, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <lcd_set_cursor_to_home_pos+0xe>
 2e4:	ab 98       	cbi	0x15, 3	; 21
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <lcd_set_cursor_to_home_pos+0x14>
}
 2ea:	08 95       	ret

000002ec <lcd_set_display_off>:
/*
 *  -> turn the display off
 */
void lcd_set_display_off()
{  
    LCD_SET_RS_TO_COMMAND();
 2ec:	aa 98       	cbi	0x15, 2	; 21
    LCD_PORT = LCD_CMD_DISPLAY_OFF;
 2ee:	88 e0       	ldi	r24, 0x08	; 8
 2f0:	82 bb       	out	0x12, r24	; 18
    LCD_PUSH_EN_BUTTON();
 2f2:	ab 9a       	sbi	0x15, 3	; 21
 2f4:	80 e9       	ldi	r24, 0x90	; 144
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	fc 01       	movw	r30, r24
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_set_display_off+0xe>
 2fe:	ab 98       	cbi	0x15, 3	; 21
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <lcd_set_display_off+0x14>
}
 304:	08 95       	ret

00000306 <lcd_set_display_on>:
/*
 *  -> turn the display on
 */
void lcd_set_display_on()
{  
    LCD_SET_RS_TO_COMMAND();
 306:	aa 98       	cbi	0x15, 2	; 21
    LCD_PORT = LCD_CMD_DISPLAY_ON;
 308:	8f e0       	ldi	r24, 0x0F	; 15
 30a:	82 bb       	out	0x12, r24	; 18
    LCD_PUSH_EN_BUTTON();
 30c:	ab 9a       	sbi	0x15, 3	; 21
 30e:	80 e9       	ldi	r24, 0x90	; 144
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	fc 01       	movw	r30, r24
 314:	31 97       	sbiw	r30, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <lcd_set_display_on+0xe>
 318:	ab 98       	cbi	0x15, 3	; 21
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <lcd_set_display_on+0x14>
}
 31e:	08 95       	ret

00000320 <lcd_set_cursor_off>:
/*
 *  -> set cursor off
 */
void lcd_set_cursor_off()
{  
    LCD_SET_RS_TO_COMMAND();
 320:	aa 98       	cbi	0x15, 2	; 21
    LCD_PORT = LCD_CMD_CURSOR_OFF;
 322:	8c e0       	ldi	r24, 0x0C	; 12
 324:	82 bb       	out	0x12, r24	; 18
    LCD_PUSH_EN_BUTTON();
 326:	ab 9a       	sbi	0x15, 3	; 21
 328:	80 e9       	ldi	r24, 0x90	; 144
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	fc 01       	movw	r30, r24
 32e:	31 97       	sbiw	r30, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <lcd_set_cursor_off+0xe>
 332:	ab 98       	cbi	0x15, 3	; 21
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <lcd_set_cursor_off+0x14>
}
 338:	08 95       	ret

0000033a <lcd_set_cursor_on>:
/*
 *  -> set cursor off
 */
void lcd_set_cursor_on()
{  
    LCD_SET_RS_TO_COMMAND();
 33a:	aa 98       	cbi	0x15, 2	; 21
    LCD_PORT = LCD_CMD_DISPLAY_ON;
 33c:	8f e0       	ldi	r24, 0x0F	; 15
 33e:	82 bb       	out	0x12, r24	; 18
    LCD_PUSH_EN_BUTTON();
 340:	ab 9a       	sbi	0x15, 3	; 21
 342:	80 e9       	ldi	r24, 0x90	; 144
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	fc 01       	movw	r30, r24
 348:	31 97       	sbiw	r30, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <lcd_set_cursor_on+0xe>
 34c:	ab 98       	cbi	0x15, 3	; 21
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <lcd_set_cursor_on+0x14>
}
 352:	08 95       	ret

00000354 <lcd_send_character>:

/*
 * SEND CHARACTER FOR AVR
 */
#if CONTROLLER_FAMILY == __AVR__
	LCD_SET_RS_TO_CHARACTER();
 354:	aa 9a       	sbi	0x15, 2	; 21
	LCD_PORT = data;
 356:	82 bb       	out	0x12, r24	; 18
	LCD_PUSH_EN_BUTTON();
 358:	ab 9a       	sbi	0x15, 3	; 21
 35a:	80 e9       	ldi	r24, 0x90	; 144
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	fc 01       	movw	r30, r24
 360:	31 97       	sbiw	r30, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <lcd_send_character+0xc>
 364:	ab 98       	cbi	0x15, 3	; 21
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <lcd_send_character+0x12>
 */
#if CONTROLLER_FAMILY == __ARM__
	// fill me
#endif  // ARM

}
 36a:	08 95       	ret

0000036c <lcd_send_string>:
/*
 * -> send a string to the lcd
 */
void 
lcd_send_string(const unsigned char *data) 
{
 36c:	ef 92       	push	r14
 36e:	ff 92       	push	r15
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
	unsigned char row_count = 0x00;
 376:	e8 2e       	mov	r14, r24
 378:	e7 01       	movw	r28, r14
 37a:	7e 01       	movw	r14, r28
 37c:	f9 2e       	mov	r15, r25
 37e:	e7 01       	movw	r28, r14
 380:	10 e0       	ldi	r17, 0x00	; 0
/*
 * SEND STRING FOR AVR
 */
#if CONTROLLER_FAMILY == __AVR__
	while((*data != '\0') && (row_count < LCD_NUMBER_OF_ROWS)) {
 382:	02 c0       	rjmp	.+4      	; 0x388 <lcd_send_string+0x1c>
			lcd_send_character(*data++);
 384:	e7 df       	rcall	.-50     	; 0x354 <lcd_send_character>
 386:	1f 5f       	subi	r17, 0xFF	; 255
			row_count++;
 388:	89 91       	ld	r24, Y+
	unsigned char row_count = 0x00;
/*
 * SEND STRING FOR AVR
 */
#if CONTROLLER_FAMILY == __AVR__
	while((*data != '\0') && (row_count < LCD_NUMBER_OF_ROWS)) {
 38a:	88 23       	and	r24, r24
 38c:	29 f0       	breq	.+10     	; 0x398 <lcd_send_string+0x2c>
 38e:	14 31       	cpi	r17, 0x14	; 20
 390:	c9 f7       	brne	.-14     	; 0x384 <lcd_send_string+0x18>
 392:	81 e0       	ldi	r24, 0x01	; 1
			lcd_send_character(*data++);
			row_count++;
	}
#if LCD_ERROR == __ON__
	if (*data != '\0') 
		lcd_errno = LCD_LINE_OVERFLOW;
 394:	80 93 9b 00 	sts	0x009B, r24
 398:	df 91       	pop	r29
 */
#if CONTROLLER_FAMILY == __ARM__
	// fill me
#endif  // ARM

}
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	ff 90       	pop	r15
 3a0:	ef 90       	pop	r14
 3a2:	08 95       	ret

000003a4 <_exit>:
 3a4:	f8 94       	cli

000003a6 <__stop_program>:
 3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <__stop_program>
