
template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000110  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000008b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000538  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ce  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d7  00000000  00000000  0000117e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000332  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010a  00000000  00000000  0000185a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	04 d0       	rcall	.+8      	; 0x7e <main>
  76:	4a c0       	rjmp	.+148    	; 0x10c <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <init_template>:
 */
void 
__attribute__((noinline)) init_template(void) 
{
	// set ddr for led pin
	SET_BIT(LED_DDR, LED_PIN);            
  7a:	20 9a       	sbi	0x04, 0	; 4
  7c:	08 95       	ret

0000007e <main>:
 */
int 
__attribute__((OS_main)) main(void) 
{

	init_template();
  7e:	fd df       	rcall	.-6      	; 0x7a <init_template>
  80:	81 e0       	ldi	r24, 0x01	; 1
	
	serial_setup_async_normal_mode(DATA_8_STOP_1_NO_PARITY);
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	3c d0       	rcall	.+120    	; 0xfe <serial_setup_async_normal_mode>
  86:	10 d0       	rcall	.+32     	; 0xa8 <helper_dummy>
  88:	40 d0       	rcall	.+128    	; 0x10a <cyclon_dummy>


	/*
	 * -> usage of dummy functions
	 */
	helper_dummy();
  8a:	28 9a       	sbi	0x05, 0	; 5
  8c:	8f e4       	ldi	r24, 0x4F	; 79
	cyclon_dummy();
  8e:	93 ec       	ldi	r25, 0xC3	; 195
  90:	01 97       	sbiw	r24, 0x01	; 1

	while (1) {
		
		// send string led on
		SET_BIT(LED_PORT, LED_PIN);
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x18>
  96:	00 00       	nop
  98:	28 98       	cbi	0x05, 0	; 5
  9a:	8f e4       	ldi	r24, 0x4F	; 79
  9c:	93 ec       	ldi	r25, 0xC3	; 195
  9e:	01 97       	sbiw	r24, 0x01	; 1
		_delay_ms(DELAYTIME);
		
		// send string led off
		CLEAR_BIT(LED_PORT, LED_PIN);
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x20>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x26>
  a4:	00 00       	nop
  a6:	f1 cf       	rjmp	.-30     	; 0x8a <main+0xc>

000000a8 <helper_dummy>:
/*
 * -> dummy function
 */
void 
helper_dummy(void)
{
  a8:	08 95       	ret

000000aa <serial_setup_usart>:
	 * #define BAUD 9600
	 * -> include <util/setbaud.h>
	 * UBRR0H = UBRRH_VALUE;                      
	 * UBRR0L = UBRRL_VALUE; 
	 */
	UBRR0H = UBRRH_VALUE;                       
  aa:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
  ae:	2c e0       	ldi	r18, 0x0C	; 12
  b0:	20 93 c4 00 	sts	0x00C4, r18

	// set needed values in 
	switch (op_mode) {
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	91 05       	cpc	r25, r1
  b8:	11 f0       	breq	.+4      	; 0xbe <serial_setup_usart+0x14>
  ba:	03 97       	sbiw	r24, 0x03	; 3
  bc:	29 f0       	breq	.+10     	; 0xc8 <serial_setup_usart+0x1e>
		 */

		break;
	default:
		// ASYNC_NORMAL
		UCSR0A &= ~(1 << U2X0); // disable U2Xn
  be:	80 91 c0 00 	lds	r24, 0x00C0
  c2:	8d 7f       	andi	r24, 0xFD	; 253
  c4:	80 93 c0 00 	sts	0x00C0, r24

	}

	// enable or disable RX/TX 
	switch (ena_rxtx) {
  c8:	42 30       	cpi	r20, 0x02	; 2
  ca:	51 05       	cpc	r21, r1
  cc:	69 f0       	breq	.+26     	; 0xe8 <serial_setup_usart+0x3e>
  ce:	43 30       	cpi	r20, 0x03	; 3
  d0:	51 05       	cpc	r21, r1
  d2:	89 f0       	breq	.+34     	; 0xf6 <serial_setup_usart+0x4c>
  d4:	41 30       	cpi	r20, 0x01	; 1
  d6:	51 05       	cpc	r21, r1
  d8:	71 f4       	brne	.+28     	; 0xf6 <serial_setup_usart+0x4c>
	case ENA_ALL:
		UCSR0B = (1 << TXEN0) | (1 << RXEN0);
		break;
	case ENA_RX:
		UCSR0B = (1 << RXEN0);
  da:	80 e1       	ldi	r24, 0x10	; 16
  dc:	80 93 c1 00 	sts	0x00C1, r24
		UCSR0B &= ~(1 << TXEN0);
  e0:	80 91 c1 00 	lds	r24, 0x00C1
  e4:	87 7f       	andi	r24, 0xF7	; 247
  e6:	08 c0       	rjmp	.+16     	; 0xf8 <serial_setup_usart+0x4e>
		break;
	case ENA_TX:
		UCSR0B = (1 << TXEN0);
  e8:	88 e0       	ldi	r24, 0x08	; 8
  ea:	80 93 c1 00 	sts	0x00C1, r24
		UCSR0B &= ~(1 << RXEN0);
  ee:	80 91 c1 00 	lds	r24, 0x00C1
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <serial_setup_usart+0x4e>
		break;
	default:
		// enable TX and RX
		UCSR0B = (1 << TXEN0) | (1 << RXEN0);
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	80 93 c1 00 	sts	0x00C1, r24
  fc:	08 95       	ret

000000fe <serial_setup_async_normal_mode>:
 * -> setup USART0 for async mode at normal speed ... U2Xn=0
 */
void 
serial_setup_async_normal_mode(serial_frame_type_t frame_type)
{
	serial_setup_usart(ASYNC_NORMAL,
  fe:	43 e0       	ldi	r20, 0x03	; 3
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	bc 01       	movw	r22, r24
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	d0 cf       	rjmp	.-96     	; 0xaa <serial_setup_usart>

0000010a <cyclon_dummy>:
 */
void 
cyclon_dummy(void)
{

	helper_dummy();
 10a:	ce cf       	rjmp	.-100    	; 0xa8 <helper_dummy>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
